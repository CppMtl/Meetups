#ifndef STD_EXECUTION_INCLUDED
#define STD_EXECUTION_INCLUDED

#include <properties>

namespace std {
namespace execution {

// Associated execution context.
struct context_t;

// Executor concept property.
struct executor_concept_t;

#if defined(__cpp_concepts)

// Executor concepts.
//template<class T> concept bool Executor;
//template<class T> concept bool OneWayExecutor;
//template<class T> concept bool BulkOneWayExecutor;

#endif

// Concept-enforcing properties.
struct oneway_t;
struct bulk_oneway_t;

// Blocking behaviour.
struct blocking_t;

// Allow adaptation of blocking and directionality (e.g. twoway in terms of oneway).
struct blocking_adaptation_t;

// Whether submitted tasks represent a fork or continuation of the control flow.
struct relationship_t;

// Whether there is outstanding work, i.e. an indication of likely task submission in the future.
struct outstanding_work_t;

// Properties for bulk execution forward progress guarantees.
struct bulk_guarantee_t;

// Properties for mapping of execution on to threads.
struct mapping_t;

// Memory allocations.
template<class ProtoAllocator> struct allocator_t;

// Occupancy.
struct occupancy_t;

#if !defined(__cpp_concepts)

// Type traits to determine conformance to executor concepts.
template<class Executor> struct is_executor;
template<class Executor> struct is_oneway_executor;
template<class Executor> struct is_bulk_oneway_executor;

template<class Executor> constexpr bool is_executor_v = is_executor<Executor>::value;
template<class Executor> constexpr bool is_oneway_executor_v = is_oneway_executor<Executor>::value;
template<class Executor> constexpr bool is_bulk_oneway_executor_v = is_bulk_oneway_executor<Executor>::value;

#endif

// Type traits to obtain a bulk executor's shape and index types.
template<class Executor> struct executor_shape;
template<class Executor> struct executor_index;

template<class Executor> using executor_shape_t = typename executor_shape<Executor>::type;
template<class Executor> using executor_index_t = typename executor_index<Executor>::type;

// Polymorphic wrappers.
class bad_executor;
template<class InterfaceProperty, class... SupportableProperties>
  using executor = typename InterfaceProperty::template polymorphic_executor_type<InterfaceProperty, SupportableProperties...>;

} // namespace execution
} // namespace std

#include <bits/execution/is_executor.h>
#include <bits/execution/is_oneway_executor.h>
#include <bits/execution/is_bulk_oneway_executor.h>
#include <bits/execution/context.h>
#include <bits/execution/executor_concept.h>
#include <bits/execution/oneway.h>
#include <bits/execution/bulk_oneway.h>
#include <bits/execution/blocking.h>
#include <bits/execution/blocking_adaptation.h>
#include <bits/execution/relationship.h>
#include <bits/execution/outstanding_work.h>
#include <bits/execution/bulk_guarantee.h>
#include <bits/execution/mapping.h>
#include <bits/execution/allocator.h>
#include <bits/execution/occupancy.h>
#include <bits/execution/executor_shape.h>
#include <bits/execution/executor_index.h>
#include <bits/execution/oneway_executor.h>
#include <bits/execution/bulk_oneway_executor.h>

#endif // STD_EXECUTION_INCLUDED
